<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Control.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Control.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Jan 31 15:50:54 2018
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25a]">USART_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">assert_failed</a><BR>
 <LI><a href="#[259]">USART_GetFlagStatus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">assert_failed</a><BR>
 <LI><a href="#[238]">usart_send_data</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[df]">assert_failed</a><BR>
 <LI><a href="#[42]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">App_TestShellCmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[2a]">BusFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[70]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[71]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[72]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6f]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[89]">COMX100_read_byte</a> from comx100.o(.text) referenced from app_comx100.o(.text)
 <LI><a href="#[8a]">COMX100_write_byte</a> from comx100.o(.text) referenced from app_comx100.o(.text)
 <LI><a href="#[7f]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7e]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[95]">DEV_TransferPacket</a> from cifxhwfunctions.o(.text) referenced 5 times from cifxfunctions.o(.text)
 <LI><a href="#[3b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream1_IRQHandler</a> from app_usart_dma_route.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream3_IRQHandler</a> from app_usart_dma_route.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[75]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[76]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">DebugMon_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6d]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6e]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">EXTI15_10_IRQHandler</a> from app_control_key_press.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">EXTI3_IRQHandler</a> from app_comx100.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[60]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[80]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">HardFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[79]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[78]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">MemManage_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">NMI_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[97]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[96]">OSTmr_Task</a> from os_tmr.o(.text) referenced from os_tmr.o(.text)
 <LI><a href="#[414]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[98]">OS_TaskReturn</a> from os_task.o(.text) referenced from os_cpu_c.o(.text)
 <LI><a href="#[411]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[73]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7d]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[61]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[63]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">SVC_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">SysTick_Handler</a> from bsp.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[99]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[32]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">TIM2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[62]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[66]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[67]">TIM7_IRQHandler</a> from app_user_tmr.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5e]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[64]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[65]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from app_shell.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">USART3_IRQHandler</a> from app_usart_dma_route.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[77]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">UsageFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[9c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[9d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9b]">_snputc</a> from _snputc.o(.text) referenced 2 times from c89vsnprintf.o(.text)
 <LI><a href="#[93]">app_buzzer_ring_task</a> from app_buzzer_ring.o(.text) referenced from app_buzzer_ring.o(.text)
 <LI><a href="#[81]">app_start_task</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[b]">cmd_list</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[8d]">comX100_isr_task</a> from app_comx100.o(.text) referenced from app_comx100.o(.text)
 <LI><a href="#[8c]">comX100_module_task</a> from app_comx100.o(.text) referenced from app_comx100.o(.text)
 <LI><a href="#[1d]">control_RPDO10_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1e]">control_RPDO11_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1f]">control_RPDO12_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[20]">control_RPDO13_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[21]">control_RPDO14_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[22]">control_RPDO15_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[23]">control_RPDO16_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[24]">control_RPDO17_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[25]">control_RPDO18_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[14]">control_RPDO1_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[15]">control_RPDO2_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[16]">control_RPDO3_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[17]">control_RPDO4_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[18]">control_RPDO5_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[19]">control_RPDO6_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1a]">control_RPDO7_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1b]">control_RPDO8_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1c]">control_RPDO9_callback</a> from app_control_pdo_callback.o(.text) referenced 2 times from app_control_board.o(.data)
 <LI><a href="#[1bc]">control_adjust_implement_task</a> from app_control_adjust_implement.o(.text) referenced from app_control_adjust_implement.o(.text)
 <LI><a href="#[13b]">control_board_task</a> from app_control_board.o(.text) referenced from app_control_board.o(.text)
 <LI><a href="#[94]">control_cali_pump_task</a> from app_control_cali_pump.o(.text) referenced from app_control_cali_pump.o(.text)
 <LI><a href="#[221]">control_feedback_task</a> from app_control_feedback.o(.text) referenced from app_control_feedback.o(.text)
 <LI><a href="#[87]">control_flow_task</a> from app_control_flow.o(.text) referenced from app_control_flow.o(.text)
 <LI><a href="#[88]">control_monitor_task</a> from app_control_monitor.o(.text) referenced from app_control_monitor.o(.text)
 <LI><a href="#[8e]">control_timing_back_task</a> from app_control_timing_back.o(.text) referenced from app_control_timing_back.o(.text)
 <LI><a href="#[12]">ctrl_centri_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[11]">ctrl_pump_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[13]">ctrl_turn_valve_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[a]">get_system_version</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[c]">get_ucos_status</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[8b]">handle_notification</a> from app_comx100.o(.text) referenced from app_comx100.o(.text)
 <LI><a href="#[86]">led_task</a> from app_led.o(.text) referenced from app_led.o(.text)
 <LI><a href="#[d]">reset_system</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[e]">rtc_bkpsram_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[82]">shell_task</a> from app_shell.o(.text) referenced from app_shell.o(.text)
 <LI><a href="#[1e4]">tmr_key_press_callback</a> from app_control_key_press.o(.text) referenced from app_control_key_press.o(.text)
 <LI><a href="#[1e5]">tmr_pause_program_callback</a> from app_control_key_press.o(.text) referenced from app_control_key_press.o(.text)
 <LI><a href="#[20c]">tmr_test_cancal_protect_callback</a> from app_control_set_canal.o(.text) referenced from app_control_set_canal.o(.text)
 <LI><a href="#[90]">tpdo_arm1_send_task</a> from app_cmd_send.o(.text) referenced from app_cmd_send.o(.text)
 <LI><a href="#[91]">tpdo_arm2_send_task</a> from app_cmd_send.o(.text) referenced from app_cmd_send.o(.text)
 <LI><a href="#[92]">tpdo_arm3_send_task</a> from app_cmd_send.o(.text) referenced from app_cmd_send.o(.text)
 <LI><a href="#[10]">tpdo_send_test_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[225]">trouble_shooting_task</a> from app_trouble_shooting.o(.text) referenced from app_trouble_shooting.o(.text)
 <LI><a href="#[85]">uart_data_recv</a> from app_cmd_analysis.o(.text) referenced from app_cmd_analysis.o(.text)
 <LI><a href="#[8f]">uart_ipc_send_task</a> from app_cmd_send.o(.text) referenced from app_cmd_send.o(.text)
 <LI><a href="#[f]">uart_send_test_cmd</a> from app_shell.o(.text) referenced 2 times from app_shell.o(.data)
 <LI><a href="#[84]">usart_dma_route_task</a> from app_usart_dma_route.o(.text) referenced from app_usart_dma_route.o(.text)
 <LI><a href="#[83]">usart_dma_send_task</a> from app_usart_dma_route.o(.text) referenced from app_usart_dma_route.o(.text)
 <LI><a href="#[1fe]">user_tmr_task</a> from app_user_tmr.o(.text) referenced from app_user_tmr.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a1]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a2]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[472]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a4]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a6]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a9]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ac]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ae]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[b0]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b2]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b5]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b6]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b8]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[ba]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bc]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[be]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[c0]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[cc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c2]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[c6]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[493]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[df]"></a>assert_failed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_dma
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_no_blocking
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_test_cancal_protect_callback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_speed_table
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_isr_task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_pause_status
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_key_press
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_answer_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_answer_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_monitor_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_cali_pump_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pressure_now
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trouble_shooting_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comX100_module_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_send_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_flow_task
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_feedback_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_adust_implement_task
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO4_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO16_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO10_callback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_recv_callback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_date
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_event
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trace
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shell_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_control_board_task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_start_task
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteMutex
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteLock
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteEvent
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateMutex
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateEvent
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearITPendingBit
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectedConversionValue
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedDiscModeCmd
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AutoInjectedConvCmd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSoftwareStartInjectedConvCmdStatus
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartInjectedConv
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigInjectedConvEdgeConfig
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigInjectedConvConfig
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetInjectedOffset
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedSequencerLengthConfig
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InjectedChannelConfig
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MultiModeDMARequestAfterLastTransferCmd
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DiscModeCmd
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DiscModeChannelCountConfig
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ContinuousModeCmd
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_EOCOnEachRegularChannelCmd
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetSoftwareStartConvStatus
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogSingleChannelConfig
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogThresholdsConfig
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AnalogWatchdogCmd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_FlashPowerDownCmd
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_WakeUpPinCmd
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_OutputTypeConfig
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampPinSelection
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperPinSelection
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperCmd
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TamperTriggerConfig
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStampCmd
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CalibOutputCmd
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_OutputConfig
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DayLightSavingConfig
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFIFOStatus
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PeriphIncOffsetSizeConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_RemapConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectHallSensor
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCCDMA
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAConfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCOM
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNCmd
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3NPolarityConfig
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2NPolarityConfig
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PolarityConfig
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1NPolarityConfig
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC4Ref
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC3Ref
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC2Ref
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC1Ref
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC4Config
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC3Config
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC2Config
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetClockDivision
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetPrescaler
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_CompensationCellCmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockLPModeCmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockLPModeCmd
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockLPModeCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockLPModeCmd
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockLPModeCmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphResetCmd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO2Config
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OneBitMethodCmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearITPendingBit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetITStatus
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearFlag
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetFlagStatus
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ITConfig
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDCmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDInit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDECCCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDDeInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMDeInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_u32_from_bkpsram
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_u32_to_bkpsram
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backup_reg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_backup_reg
</UL>

<P><STRONG><a name="[ea]"></a>init_app_start_task</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>app_cmd_tbl_add</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[e6]"></a>init_shell_task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>init_usart_dma_route_task</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
</UL>

<P><STRONG><a name="[125]"></a>init_usart_with_recv_callback</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
</UL>

<P><STRONG><a name="[129]"></a>send_data_packet</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
</UL>

<P><STRONG><a name="[3c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>control_uart_cmd_analysis_init</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, app_cmd_analysis.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_recv_callback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[13b]"></a>control_board_task</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_control_board.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trouble_shooting_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comX100_module_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_send_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_flow_task
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_feedback_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_adust_implement_task
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>init_control_board_task</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app_control_board.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[e7]"></a>init_led_task</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_led.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_gpio
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[14]"></a>control_RPDO1_callback</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>control_RPDO2_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>control_RPDO3_callback</STRONG> (Thumb, 780 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pressure_now
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_overflow_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_canal_pressure_status
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_overflow_status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_wait_status
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_pressure_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>control_RPDO4_callback</STRONG> (Thumb, 524 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_fn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>control_RPDO5_callback</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>control_RPDO6_callback</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>control_RPDO7_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>control_RPDO8_callback</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>control_RPDO9_callback</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_pressure_status
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>control_RPDO10_callback</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_fn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>control_RPDO11_callback</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>control_RPDO12_callback</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>control_RPDO13_callback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>control_RPDO14_callback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>control_RPDO15_callback</STRONG> (Thumb, 668 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_wait_status
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>control_RPDO16_callback</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_fn
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>control_RPDO17_callback</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>control_RPDO18_callback</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app_control_pdo_callback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_board.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>control_init_flow_task</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, app_control_flow.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[163]"></a>os_stop_program</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_pause_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_centrifuge
</UL>

<P><STRONG><a name="[167]"></a>os_resume_flow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_pause_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_pressure_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
</UL>

<P><STRONG><a name="[16c]"></a>os_pause_flow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
</UL>

<P><STRONG><a name="[172]"></a>control_init_monitor_task</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_control_monitor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_key_press
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[14a]"></a>post_error_msg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pause_program_callback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_key_press_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_high_pressure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_low_pressure
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO5_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO18_callback
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO17_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO12_callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO11_callback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
</UL>

<P><STRONG><a name="[178]"></a>EnumBoardDemo</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, app_comx100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverOpen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumChannels
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumBoards
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverClose
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[17d]"></a>SysdeviceDemo</STRONG> (Thumb, 1448 bytes, Stack size 0 bytes, app_comx100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdevicePutPacket
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceOpen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceInfo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetPacket
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetMBXState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceClose
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverOpen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverClose
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPacket
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[184]"></a>ChannelDemo</STRONG> (Thumb, 528 bytes, Stack size 0 bytes, app_comx100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverOpen
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverGetErrorDescription
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverClose
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPutPacket
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelOpen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOReadSendData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetPacket
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelClose
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPacket
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[18d]"></a>BlockDemo</STRONG> (Thumb, 1076 bytes, Stack size 0 bytes, app_comx100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverOpen
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverGetErrorDescription
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverClose
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelOpen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelExtendedStatusBlock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelControlBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelCommonStatusBlock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelClose
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>

<P><STRONG><a name="[191]"></a>cifXToolkitInit</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
</UL>

<P><STRONG><a name="[13c]"></a>init_comX100_module_task</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[fe]"></a>comX100_send_packet</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_answer_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_answer_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
</UL>

<P><STRONG><a name="[1a1]"></a>create_comX100_isr_task</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[39]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>adjust_pump_speed</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_agglu_rate
</UL>

<P><STRONG><a name="[1b3]"></a>adjust_agglu_rate</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_speed_table
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_phase_speed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
</UL>

<P><STRONG><a name="[1b6]"></a>adjust_ac_speed</STRONG> (Thumb, 594 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_speed_table
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_phase_speed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
</UL>

<P><STRONG><a name="[1b8]"></a>adjust_feedback_speed</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_speed_table
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_phase_speed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
</UL>

<P><STRONG><a name="[1b9]"></a>adjust_draw_speed</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_speed_table
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_phase_speed
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
</UL>

<P><STRONG><a name="[1bc]"></a>control_adjust_implement_task</STRONG> (Thumb, 642 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pour_saline_func
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_end_func
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_end_func
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_adjust_implement.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>control_init_adust_implement_task</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[137]"></a>set_adjust_event</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO9_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
</UL>

<P><STRONG><a name="[1bd]"></a>response_low_pressure</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>

<P><STRONG><a name="[1be]"></a>response_high_pressure</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>

<P><STRONG><a name="[139]"></a>uart_crc_check_func</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
</UL>

<P><STRONG><a name="[1cd]"></a>uart_crc_generate_func</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>

<P><STRONG><a name="[1cc]"></a>get_current_fn</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_run_cassette
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_door_lock
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pump_distance_type
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
</UL>

<P><STRONG><a name="[149]"></a>arm0_get_cur_prio</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pause_program_callback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_key_press_callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_high_pressure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_low_pressure
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
</UL>

<P><STRONG><a name="[152]"></a>judge_array_null</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO6_callback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO18_callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO12_callback
</UL>

<P><STRONG><a name="[1dc]"></a>get_array_max_value</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
</UL>

<P><STRONG><a name="[1cb]"></a>arm_resend_cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
</UL>

<P><STRONG><a name="[1bf]"></a>get_average_value</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_control_common_function.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
</UL>

<P><STRONG><a name="[13f]"></a>control_init_timing_back_task</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[14f]"></a>update_pressure_now</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
</UL>

<P><STRONG><a name="[140]"></a>control_init_send_task</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[fc]"></a>uart_send_frame</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_crc_generate_func
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commit_result
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pressure_now
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pressure_frame
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_error_msg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_hardfault_err
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test_cmd
</UL>

<P><STRONG><a name="[fa]"></a>uart_answer_cmd</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test_cmd
</UL>

<P><STRONG><a name="[1cf]"></a>arm1_send_frame</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_fn
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pump_distance_type
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
</UL>

<P><STRONG><a name="[15a]"></a>arm1_answer_cmd</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_answer_error
</UL>

<P><STRONG><a name="[1d1]"></a>arm2_send_frame</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_fn
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pump_distance_type
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
</UL>

<P><STRONG><a name="[15b]"></a>arm2_answer_cmd</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_answer_error
</UL>

<P><STRONG><a name="[1d2]"></a>arm3_send_frame</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_fn
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_run_cassette
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_door_lock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
</UL>

<P><STRONG><a name="[15c]"></a>arm3_answer_cmd</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_answer_error
</UL>

<P><STRONG><a name="[ff]"></a>init_pump_param</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[1a9]"></a>init_valve_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
</UL>

<P><STRONG><a name="[101]"></a>ctrl_start_pump</STRONG> (Thumb, 608 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cmd_fn
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[103]"></a>ctrl_stop_pump</STRONG> (Thumb, 378 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_stopped
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_run_pumps
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[1d5]"></a>ctrl_init_pump_pos</STRONG> (Thumb, 480 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all_pumps_pos
</UL>

<P><STRONG><a name="[109]"></a>ctrl_turn_valve</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_valve_end
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_valve_func
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_canal
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve_cmd
</UL>

<P><STRONG><a name="[107]"></a>ctrl_start_centrifuge</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_down_centrifuge
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_centri_cmd
</UL>

<P><STRONG><a name="[106]"></a>ctrl_stop_centrifuge</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_centrifuge
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_centri_cmd
</UL>

<P><STRONG><a name="[1d8]"></a>ctrl_door_lock</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lock_end
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_centrifuge_lid
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_canal
</UL>

<P><STRONG><a name="[1db]"></a>ctrl_run_cassette</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cassette_end
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
</UL>

<P><STRONG><a name="[102]"></a>wait_pump_end</STRONG> (Thumb, 714 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_array_max_value
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_fn
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[1dd]"></a>ctrl_load_canal</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_run_cassette
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_canal
</UL>

<P><STRONG><a name="[1de]"></a>ctrl_unload_canal</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_run_cassette
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cartridge_pos
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_canal
</UL>

<P><STRONG><a name="[170]"></a>pause_run_pumps</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pause_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
</UL>

<P><STRONG><a name="[16a]"></a>resume_run_pumps</STRONG> (Thumb, 482 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pause_state
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
</UL>

<P><STRONG><a name="[161]"></a>pressure_abnormal_handle</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pressure_abnormal_state
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_implement
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_implement
</UL>

<P><STRONG><a name="[1a6]"></a>pressure_normal_handle</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pressure_abnormal_state
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_end_func
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_end_func
</UL>

<P><STRONG><a name="[104]"></a>clear_pump_total_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pump_distance_type
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[105]"></a>get_pump_total_distance</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pump_distance_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_final_result
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_total_distance
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
</UL>

<P><STRONG><a name="[1e4]"></a>tmr_key_press_callback</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, app_control_key_press.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_key_press.o(.text)
</UL>
<P><STRONG><a name="[1e5]"></a>tmr_pause_program_callback</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, app_control_key_press.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alarm_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_off
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_on
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_key_press.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>control_init_key_press</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, app_control_key_press.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_monitor_task
</UL>

<P><STRONG><a name="[164]"></a>stop_pause_status</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_control_key_press.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_on
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stop_program
</UL>

<P><STRONG><a name="[58]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, app_control_key_press.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_start
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>test_comm_state</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
</UL>

<P><STRONG><a name="[1ec]"></a>test_all_pumps_pos</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[1ed]"></a>test_cartridge_pos</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[1ee]"></a>test_valve_func</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[1ef]"></a>test_power_control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[1f0]"></a>test_weeping_detector</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[1f1]"></a>test_centrifuge_lid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_door_lock
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
</UL>

<P><STRONG><a name="[156]"></a>test_power_on</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, app_control_poweron_test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_centrifuge_lid
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_weeping_detector
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_control
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_valve_func
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cartridge_pos
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all_pumps_pos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
</UL>

<P><STRONG><a name="[134]"></a>init_flow_speed_table</STRONG> (Thumb, 1784 bytes, Stack size 0 bytes, app_control_speed_table.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speed_table
</UL>

<P><STRONG><a name="[1b5]"></a>set_flow_speed_table</STRONG> (Thumb, 1172 bytes, Stack size 0 bytes, app_control_speed_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_agglu_rate
</UL>

<P><STRONG><a name="[1f2]"></a>get_flow_speed_table</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_control_speed_table.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
</UL>

<P><STRONG><a name="[1bb]"></a>get_phase_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_speed_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
</UL>

<P><STRONG><a name="[1b4]"></a>get_cur_phase_speed</STRONG> (Thumb, 446 bytes, Stack size 0 bytes, app_control_speed_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_agglu_rate
</UL>

<P><STRONG><a name="[1f3]"></a>user_tmr_exit_critical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_stop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_del
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_create
</UL>

<P><STRONG><a name="[1f5]"></a>user_tmr_enter_critical</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_stop
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_del
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_create
</UL>

<P><STRONG><a name="[1fe]"></a>user_tmr_task</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_user_tmr.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>user_timer_init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[1e9]"></a>user_timer_create</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, app_user_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_used
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_key_press
</UL>

<P><STRONG><a name="[200]"></a>user_timer_del</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_user_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
</UL>

<P><STRONG><a name="[1eb]"></a>user_timer_start</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>user_timer_stop</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app_user_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
</UL>

<P><STRONG><a name="[67]"></a>TIM7_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[204]"></a>stable_blood_collect</STRONG> (Thumb, 488 bytes, Stack size 0 bytes, app_control_blood_collect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_speed_table
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[206]"></a>second_phase_ten_mins</STRONG> (Thumb, 2762 bytes, Stack size 0 bytes, app_control_blood_collect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_collect_status
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flow_speed_table
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pump_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[209]"></a>first_phase_ten_mins</STRONG> (Thumb, 2176 bytes, Stack size 0 bytes, app_control_blood_collect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[20b]"></a>blood_priming</STRONG> (Thumb, 964 bytes, Stack size 0 bytes, app_control_blood_collect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[158]"></a>blood_collect</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, app_control_blood_collect.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_collect_status
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
</UL>

<P><STRONG><a name="[20c]"></a>tmr_test_cancal_protect_callback</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_set_canal.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>set_canal</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_canal_pressure_status
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_canal
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
</UL>

<P><STRONG><a name="[136]"></a>set_run_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stop_program
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
</UL>

<P><STRONG><a name="[205]"></a>set_flow_wait_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
</UL>

<P><STRONG><a name="[14b]"></a>get_flow_wait_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
</UL>

<P><STRONG><a name="[154]"></a>set_flow_pressure_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_high_pressure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_low_pressure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_end_func
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_end_func
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_implement
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_implement
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
</UL>

<P><STRONG><a name="[14e]"></a>get_flow_pressure_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO9_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
</UL>

<P><STRONG><a name="[14d]"></a>set_overflow_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
</UL>

<P><STRONG><a name="[14c]"></a>get_overflow_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
</UL>

<P><STRONG><a name="[20f]"></a>set_test_canal_pressure_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
</UL>

<P><STRONG><a name="[150]"></a>get_test_canal_pressure_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
</UL>

<P><STRONG><a name="[1d0]"></a>set_cmd_fn</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
</UL>

<P><STRONG><a name="[151]"></a>get_cmd_fn</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO4_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO16_callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO10_callback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
</UL>

<P><STRONG><a name="[208]"></a>set_collect_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[1aa]"></a>get_collect_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
</UL>

<P><STRONG><a name="[1df]"></a>set_pause_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_run_pumps
</UL>

<P><STRONG><a name="[1e0]"></a>get_pause_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
</UL>

<P><STRONG><a name="[1e1]"></a>set_pressure_abnormal_state</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
</UL>

<P><STRONG><a name="[1e2]"></a>get_pressure_abnormal_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
</UL>

<P><STRONG><a name="[1b0]"></a>pause_plt_total_dis</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
</UL>

<P><STRONG><a name="[1ab]"></a>resume_plt_total_dis</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
</UL>

<P><STRONG><a name="[1c1]"></a>get_plt_collect_dis</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
</UL>

<P><STRONG><a name="[e8]"></a>init_buzzer_ring_task</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[e9]"></a>set_buzzer_ring_tone</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_centrifuge
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_implement
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_implement
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[fd]"></a>unload_canal</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_door_lock
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
</UL>

<P><STRONG><a name="[221]"></a>control_feedback_task</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commit_result
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_collect_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_canal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_feedback.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>control_init_feedback_task</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[153]"></a>control_init_cali_pump_task</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, app_control_cali_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
</UL>

<P><STRONG><a name="[207]"></a>set_total_distance_event</STRONG> (Thumb, 758 bytes, Stack size 0 bytes, app_control_cali_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pump_total_distance
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
</UL>

<P><STRONG><a name="[225]"></a>trouble_shooting_task</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, app_trouble_shooting.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_trouble_shooting.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>init_trouble_shooting_task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_trouble_shooting.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_board_task
</UL>

<P><STRONG><a name="[ce]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_start_task
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11a]"></a>Shell_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdClr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[114]"></a>Shell_Exec</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Scanner
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
</UL>

<P><STRONG><a name="[10b]"></a>Shell_CmdTblAdd</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
</UL>

<P><STRONG><a name="[22d]"></a>Shell_CmdTblRem</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdClr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[27]"></a>NMI_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22f]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>

<P><STRONG><a name="[230]"></a>hard_fault_handler_c</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[29]"></a>MemManage_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>BusFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UsageFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SVC_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DebugMon_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>app_traceInfo_output</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, trace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_total_distance
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_canal
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_centrifuge_lid
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_weeping_detector
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_control
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_valve_func
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cartridge_pos
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_all_pumps_pos
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cassette_end
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_collect_dis
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_timing_back_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_plt_total_dis
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_plt_total_dis
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_agglu_rate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_update_func
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pour_saline_func
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_end_func
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_end_func
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_new_IO_data
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_register_notification
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPacket
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO9_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO8_callback
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO5_callback
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO4_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO18_callback
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO17_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO16_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO14_callback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO13_callback
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO12_callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO11_callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO10_callback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_send_task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve_cmd
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_centri_cmd
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test_cmd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_system
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ucos_status
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_os_run_information
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TestShellCmd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_version
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_info
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
</UL>

<P><STRONG><a name="[234]"></a>app_tick_trace_output</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, trace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>

<P><STRONG><a name="[235]"></a>app_no_blocking</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[236]"></a>app_blocking</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, trace.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[e4]"></a>init_trace</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[e0]"></a>traceInfo_output</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, trace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_test_cancal_protect_callback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[f5]"></a>DumpData</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, trace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpPacket
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO9_callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO8_callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[e2]"></a>bsp_init</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[2f]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>COMX100_init</STRONG> (Thumb, 674 bytes, Stack size 0 bytes, comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[8a]"></a>COMX100_write_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comx100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_comx100.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>COMX100_read_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, comx100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_comx100.o(.text)
</UL>
<P><STRONG><a name="[19f]"></a>start_comX100_module</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
</UL>

<P><STRONG><a name="[146]"></a>init_led_gpio</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_task
</UL>

<P><STRONG><a name="[144]"></a>led_trun_on</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[145]"></a>led_trun_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[245]"></a>user_key_init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
</UL>

<P><STRONG><a name="[24a]"></a>init_pause_key</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
</UL>

<P><STRONG><a name="[24b]"></a>init_stop_key</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
</UL>

<P><STRONG><a name="[173]"></a>init_arm0_exter_gpio</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stop_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pause_key
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_monitor_task
</UL>

<P><STRONG><a name="[16e]"></a>alarm_led_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pause_program_callback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_pause_status
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
</UL>

<P><STRONG><a name="[1e6]"></a>alarm_led_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pause_program_callback
</UL>

<P><STRONG><a name="[24c]"></a>alarm_buzzer_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[24d]"></a>alarm_buzzer_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[1e7]"></a>get_alarm_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pause_program_callback
</UL>

<P><STRONG><a name="[126]"></a>init_usart</STRONG> (Thumb, 582 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_dma
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_recv_callback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trace
</UL>

<P><STRONG><a name="[128]"></a>reload_usart_dma_rx</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_recv_callback
</UL>

<P><STRONG><a name="[120]"></a>reload_usart_dma_tx</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_send_task
</UL>

<P><STRONG><a name="[238]"></a>usart_send_data</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_string
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
</UL>

<P><STRONG><a name="[22e]"></a>usart_send_string</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_blocking
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_no_blocking
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>

<P><STRONG><a name="[269]"></a>clear_bkpsram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[25b]"></a>write_backup_reg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[267]"></a>read_backup_reg</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[da]"></a>rtc_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backup_reg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bkpsram
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[f7]"></a>write_byte_to_bkpsram</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[f4]"></a>read_byte_from_bkpsram</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[26a]"></a>write_u32_to_bkpsram</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26b]"></a>read_u32_from_bkpsram</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[f8]"></a>set_rtc_time</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeStructInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[db]"></a>get_rtc_time</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[f9]"></a>set_rtc_date</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[dc]"></a>get_rtc_date</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[d9]"></a>init_VBAT_measure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[de]"></a>get_vbat_value</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[21b]"></a>bell_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
</UL>

<P><STRONG><a name="[215]"></a>bell_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tone_ring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_warn_ring
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_error_ring
</UL>

<P><STRONG><a name="[216]"></a>bell_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tone_ring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_warn_ring
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_error_ring
</UL>

<P><STRONG><a name="[23a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[1f9]"></a>NVIC_Init</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_dma
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stop_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pause_key
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[27b]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27c]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27d]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[249]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stop_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pause_key
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[27e]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27f]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[280]"></a>EXTI_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a2]"></a>EXTI_GetITStatus</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[281]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[242]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 830 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
</UL>

<P><STRONG><a name="[243]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
</UL>

<P><STRONG><a name="[282]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[283]"></a>FSMC_NANDInit</STRONG> (Thumb, 510 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[284]"></a>FSMC_NANDCmd</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[285]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[286]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 456 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[287]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[288]"></a>FSMC_ITConfig</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[289]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28a]"></a>FSMC_ClearFlag</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28b]"></a>FSMC_GetITStatus</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28c]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28d]"></a>GPIO_DeInit</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[23f]"></a>GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stop_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pause_key
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_gpio
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[247]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[28f]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1da]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alarm_status
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cassette_end
</UL>

<P><STRONG><a name="[290]"></a>GPIO_ReadInputData</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[291]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[292]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[244]"></a>GPIO_SetBits</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_buzzer_on
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_comX100_module
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_on
</UL>

<P><STRONG><a name="[240]"></a>GPIO_ResetBits</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_buzzer_off
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_off
</UL>

<P><STRONG><a name="[293]"></a>GPIO_WriteBit</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[294]"></a>GPIO_Write</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[295]"></a>GPIO_ToggleBits</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[241]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 384 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[24f]"></a>USART_DeInit</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[250]"></a>USART_Init</STRONG> (Thumb, 456 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[298]"></a>USART_ClockInit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[253]"></a>USART_Cmd</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[299]"></a>USART_SetPrescaler</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29a]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29b]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25a]"></a>USART_SendData</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
</UL>

<P><STRONG><a name="[11d]"></a>USART_ReceiveData</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[29c]"></a>USART_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29d]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29e]"></a>USART_WakeUpConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[29f]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a0]"></a>USART_LINCmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a1]"></a>USART_SendBreak</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a2]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a3]"></a>USART_SetGuardTime</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a4]"></a>USART_SmartCardCmd</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a5]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a6]"></a>USART_IrDAConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a7]"></a>USART_IrDACmd</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[258]"></a>USART_DMACmd</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
</UL>

<P><STRONG><a name="[251]"></a>USART_ITConfig</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[259]"></a>USART_GetFlagStatus</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_send_data
</UL>

<P><STRONG><a name="[252]"></a>USART_ClearFlag</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[11c]"></a>USART_GetITStatus</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2a8]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a9]"></a>RCC_HSEConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[260]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[2aa]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2ab]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ac]"></a>RCC_HSICmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25f]"></a>RCC_LSEConfig</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[2ad]"></a>RCC_LSICmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ae]"></a>RCC_PLLConfig</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2af]"></a>RCC_PLLCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b0]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b1]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b2]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b3]"></a>RCC_MCO1Config</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b4]"></a>RCC_MCO2Config</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b5]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b6]"></a>RCC_HCLKConfig</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b7]"></a>RCC_PCLK1Config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b8]"></a>RCC_PCLK2Config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[239]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[261]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[262]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[2b9]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ba]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23d]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_gpio
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[2bb]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23e]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMX100_init
</UL>

<P><STRONG><a name="[1f8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[246]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arm0_exter_gpio
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[28e]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2bc]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bd]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[297]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[296]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[2be]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2bf]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c0]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c1]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c2]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c3]"></a>RCC_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c4]"></a>RCC_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c5]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c6]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2c7]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[248]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stop_key
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pause_key
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_key_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
</UL>

<P><STRONG><a name="[2c8]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2c9]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ca]"></a>TIM_DeInit</STRONG> (Thumb, 440 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[1fb]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
</UL>

<P><STRONG><a name="[1fa]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
</UL>

<P><STRONG><a name="[2cb]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2cc]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2cd]"></a>TIM_SetCounter</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ce]"></a>TIM_SetAutoreload</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2cf]"></a>TIM_GetCounter</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d0]"></a>TIM_GetPrescaler</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d1]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d2]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d3]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d4]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_SetClockDivision</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1fd]"></a>TIM_Cmd</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
</UL>

<P><STRONG><a name="[2d6]"></a>TIM_OC1Init</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d7]"></a>TIM_OC2Init</STRONG> (Thumb, 486 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d8]"></a>TIM_OC3Init</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2d9]"></a>TIM_OC4Init</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2da]"></a>TIM_SelectOCxM</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2db]"></a>TIM_SetCompare1</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2dc]"></a>TIM_SetCompare2</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2dd]"></a>TIM_SetCompare3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2de]"></a>TIM_SetCompare4</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2df]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e0]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e1]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e2]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e3]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e4]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e5]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e6]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e7]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e8]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2e9]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ea]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2eb]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ec]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ed]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ee]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ef]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f0]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f1]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f2]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f3]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f4]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f5]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f6]"></a>TIM_CCxCmd</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f7]"></a>TIM_CCxNCmd</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2f8]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fa]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fb]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fc]"></a>TIM_ICInit</STRONG> (Thumb, 508 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[301]"></a>TIM_PWMIConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[302]"></a>TIM_GetCapture1</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[303]"></a>TIM_GetCapture2</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[304]"></a>TIM_GetCapture3</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[305]"></a>TIM_GetCapture4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[306]"></a>TIM_BDTRConfig</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[307]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[308]"></a>TIM_SelectCOM</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[309]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1fc]"></a>TIM_ITConfig</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_stm_tim_init
</UL>

<P><STRONG><a name="[30a]"></a>TIM_GenerateEvent</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[202]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>TIM_ClearFlag</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[30b]"></a>TIM_GetITStatus</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30d]"></a>TIM_DMAConfig</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30e]"></a>TIM_DMACmd</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30f]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[310]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[311]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[312]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[313]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[314]"></a>TIM_ETRConfig</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[315]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[316]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[317]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[318]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[319]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31a]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31b]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31c]"></a>TIM_RemapConfig</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[254]"></a>DMA_DeInit</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[255]"></a>DMA_Init</STRONG> (Thumb, 740 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[12f]"></a>DMA_Cmd</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[31d]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31e]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[31f]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[12b]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[320]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[321]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[322]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[323]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[12e]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[324]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[325]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 470 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[256]"></a>DMA_ClearFlag</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
</UL>

<P><STRONG><a name="[257]"></a>DMA_ITConfig</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_rx
</UL>

<P><STRONG><a name="[12a]"></a>DMA_GetITStatus</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[263]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[327]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[326]"></a>RTC_DeInit</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[328]"></a>RTC_ExitInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[264]"></a>RTC_Init</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[329]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[32a]"></a>RTC_RefClockCmd</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[26d]"></a>RTC_SetTime</STRONG> (Thumb, 470 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
</UL>

<P><STRONG><a name="[26c]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
</UL>

<P><STRONG><a name="[26e]"></a>RTC_GetTime</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
</UL>

<P><STRONG><a name="[270]"></a>RTC_SetDate</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_date
</UL>

<P><STRONG><a name="[26f]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_date
</UL>

<P><STRONG><a name="[271]"></a>RTC_GetDate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_date
</UL>

<P><STRONG><a name="[32d]"></a>RTC_SetAlarm</STRONG> (Thumb, 704 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[32e]"></a>RTC_GetAlarm</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[32f]"></a>RTC_AlarmCmd</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[330]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[331]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[332]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[333]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[334]"></a>RTC_OutputConfig</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[335]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[336]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[337]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[338]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[339]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[33a]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33b]"></a>RTC_TamperCmd</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25c]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_backup_reg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[268]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_backup_reg
</UL>

<P><STRONG><a name="[33c]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33d]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33e]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[33f]"></a>RTC_ITConfig</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[340]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[341]"></a>RTC_ClearFlag</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[342]"></a>RTC_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[343]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[344]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[25e]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[345]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[346]"></a>PWR_PVDCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[347]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[265]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[348]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[349]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[266]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_config
</UL>

<P><STRONG><a name="[34a]"></a>PWR_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34b]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[274]"></a>ADC_Init</STRONG> (Thumb, 402 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[273]"></a>ADC_CommonInit</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[279]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[34c]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34d]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34e]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[34f]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[277]"></a>ADC_VBATCmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[276]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[27a]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VBAT_measure
</UL>

<P><STRONG><a name="[350]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[351]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[352]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[353]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[354]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[355]"></a>ADC_GetConversionValue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[275]"></a>ADC_DMACmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[278]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBAT_measure_config
</UL>

<P><STRONG><a name="[356]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[357]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[358]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[359]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35a]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35b]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35c]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35d]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35e]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[35f]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[360]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[361]"></a>ADC_ITConfig</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[362]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[363]"></a>ADC_ClearFlag</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[364]"></a>ADC_GetITStatus</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[365]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[366]"></a>DEV_DeleteFile</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveFWFiles
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
</UL>

<P><STRONG><a name="[369]"></a>DEV_RemoveChannelFiles</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
</UL>

<P><STRONG><a name="[36d]"></a>DEV_IsFWFile</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveFWFiles
</UL>

<P><STRONG><a name="[36e]"></a>DEV_IsNXOFile</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
</UL>

<P><STRONG><a name="[36f]"></a>DEV_IsNXFFile</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
</UL>

<P><STRONG><a name="[370]"></a>DEV_RemoveFWFiles</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, cifxdownload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsFWFile
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[371]"></a>DEV_GetFWTransferTypeFromFileName</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsFWFile
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceUpload
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelDownload
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
</UL>

<P><STRONG><a name="[372]"></a>DEV_CheckForDownload</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_append
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcmp
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
</UL>

<P><STRONG><a name="[378]"></a>DEV_DownloadFile</STRONG> (Thumb, 1012 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCRC32
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelDownload
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
</UL>

<P><STRONG><a name="[37b]"></a>DEV_ProcessFWDownload</STRONG> (Thumb, 1016 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXFFile
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXOFile
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
</UL>

<P><STRONG><a name="[37c]"></a>DEV_UploadFile</STRONG> (Thumb, 746 bytes, Stack size 0 bytes, cifxdownload.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateCRC32
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceUpload
</UL>

<P><STRONG><a name="[388]"></a>cifXConvertEndianess</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cifxendianess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceInfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumBoards
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelControlBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelCommonStatusBlock
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
</UL>

<P><STRONG><a name="[17e]"></a>xSysdeviceOpen</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[183]"></a>xSysdeviceClose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[180]"></a>xSysdeviceGetMBXState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetMBXState
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[181]"></a>xSysdevicePutPacket</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[182]"></a>xSysdeviceGetPacket</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[383]"></a>xSysdeviceDownload</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXOFile
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
</UL>

<P><STRONG><a name="[17f]"></a>xSysdeviceInfo</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[389]"></a>xSysdeviceReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
</UL>

<P><STRONG><a name="[38b]"></a>xSysdeviceBootstart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
</UL>

<P><STRONG><a name="[38d]"></a>xSysdeviceExtendedMemory</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UnmapUserPointer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MapUserPointer
</UL>

<P><STRONG><a name="[185]"></a>xChannelOpen</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
</UL>

<P><STRONG><a name="[18c]"></a>xChannelClose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
</UL>

<P><STRONG><a name="[390]"></a>xChannelDownload</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
</UL>

<P><STRONG><a name="[391]"></a>xChannelGetMBXState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetMBXState
</UL>

<P><STRONG><a name="[187]"></a>xChannelPutPacket</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
</UL>

<P><STRONG><a name="[188]"></a>xChannelGetPacket</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
</UL>

<P><STRONG><a name="[392]"></a>xChannelGetSendPacket</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
</UL>

<P><STRONG><a name="[393]"></a>xChannelConfigLock</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
</UL>

<P><STRONG><a name="[396]"></a>xChannelBusState</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
</UL>

<P><STRONG><a name="[398]"></a>xChannelReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[39a]"></a>xChannelIOInfo</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
</UL>

<P><STRONG><a name="[18a]"></a>xChannelIORead</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
</UL>

<P><STRONG><a name="[18b]"></a>xChannelIOWrite</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
</UL>

<P><STRONG><a name="[189]"></a>xChannelIOReadSendData</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
</UL>

<P><STRONG><a name="[18e]"></a>xChannelControlBlock</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadWriteBlock
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
</UL>

<P><STRONG><a name="[18f]"></a>xChannelCommonStatusBlock</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadWriteBlock
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
</UL>

<P><STRONG><a name="[190]"></a>xChannelExtendedStatusBlock</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadWriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
</UL>

<P><STRONG><a name="[3a4]"></a>xChannelUserBlock</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadWriteBlock
</UL>

<P><STRONG><a name="[3a5]"></a>xChannelPLCMemoryPtr</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UnmapUserPointer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MapUserPointer
</UL>

<P><STRONG><a name="[3a6]"></a>xChannelPLCIsReadReady</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetHandshakeBitState
</UL>

<P><STRONG><a name="[3a8]"></a>xChannelPLCIsWriteReady</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetHandshakeBitState
</UL>

<P><STRONG><a name="[3a9]"></a>xChannelPLCActivateWrite</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
</UL>

<P><STRONG><a name="[3aa]"></a>xChannelPLCActivateRead</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
</UL>

<P><STRONG><a name="[179]"></a>xDriverOpen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
</UL>

<P><STRONG><a name="[17c]"></a>xDriverClose</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
</UL>

<P><STRONG><a name="[3ab]"></a>xDriverGetInformation</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
</UL>

<P><STRONG><a name="[176]"></a>xDriverGetErrorDescription</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockDemo
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
</UL>

<P><STRONG><a name="[17b]"></a>xDriverEnumBoards</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
</UL>

<P><STRONG><a name="[186]"></a>xChannelInfo</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumChannels
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
</UL>

<P><STRONG><a name="[17a]"></a>xDriverEnumChannels</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
</UL>

<P><STRONG><a name="[3ac]"></a>xDriverMemoryPointer</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_UnmapUserPointer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MapUserPointer
</UL>

<P><STRONG><a name="[3ad]"></a>xChannelWatchdog</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TriggerWatchdog
</UL>

<P><STRONG><a name="[19b]"></a>xChannelHostState</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SetHostState
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetHostState
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_register_notification
</UL>

<P><STRONG><a name="[36a]"></a>xSysdeviceFindFirstFile</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelFindFirstFile
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveFWFiles
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
</UL>

<P><STRONG><a name="[3b1]"></a>xChannelFindFirstFile</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
</UL>

<P><STRONG><a name="[36c]"></a>xSysdeviceFindNextFile</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelFindNextFile
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveFWFiles
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
</UL>

<P><STRONG><a name="[3b2]"></a>xChannelFindNextFile</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
</UL>

<P><STRONG><a name="[3b3]"></a>xSysdeviceUpload</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelUpload
</UL>

<P><STRONG><a name="[3b4]"></a>xChannelUpload</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cifxfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceUpload
</UL>

<P><STRONG><a name="[19a]"></a>xChannelRegisterNotification</STRONG> (Thumb, 564 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_register_notification
</UL>

<P><STRONG><a name="[198]"></a>xChannelSyncState</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, cifxfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleSyncBit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
</UL>

<P><STRONG><a name="[3a0]"></a>DEV_ToggleBit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateRead
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateWrite
</UL>

<P><STRONG><a name="[387]"></a>HwIfRead32</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceInfo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumBoards
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXIsBaseOSModule
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashFirmware
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_get_packet
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX100
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TriggerWatchdog
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelConfigLock
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetSendPacket
</UL>

<P><STRONG><a name="[3b7]"></a>HwIfRead16</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetMBXState
</UL>

<P><STRONG><a name="[39c]"></a>HwIfRead8</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelSyncState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelRegisterNotification
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_get_packet
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_send_packet
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_waitforbitstate
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOInfo
</UL>

<P><STRONG><a name="[394]"></a>DEV_ReadHandshakeFlags</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead16
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Poll
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Poll
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetHandshakeBitState
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelConfigLock
</UL>

<P><STRONG><a name="[39e]"></a>DEV_WaitForBitState</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Irq
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelRegisterNotification
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
</UL>

<P><STRONG><a name="[384]"></a>DEV_IsReady</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SetHostState
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetMBXState
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetHostState
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
</UL>

<P><STRONG><a name="[380]"></a>DEV_PutPacket</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdevicePutPacket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPutPacket
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
</UL>

<P><STRONG><a name="[382]"></a>DEV_GetPacket</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetPacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetPacket
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
</UL>

<P><STRONG><a name="[95]"></a>DEV_TransferPacket</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cifxfunctions.o(.text)
<LI> cifxinit.o(.text)
</UL>
<P><STRONG><a name="[39d]"></a>DEV_GetIOBitstate</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelRegisterNotification
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIOArea
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsWriteReady
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsReadReady
</UL>

<P><STRONG><a name="[3b5]"></a>DEV_WaitForSyncState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Irq
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelSyncState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelRegisterNotification
</UL>

<P><STRONG><a name="[3b6]"></a>DEV_ToggleSyncBit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelSyncState
</UL>

<P><STRONG><a name="[3be]"></a>DEV_ReadHostFlags</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead16
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
</UL>

<P><STRONG><a name="[3bf]"></a>DEV_WaitForNotReady_Poll</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[3c0]"></a>DEV_WaitForReady_Poll</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[39b]"></a>DEV_IsRunning</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForRunning_Poll
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotRunning_Poll
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TriggerWatchdog
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadWriteBlock
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOInfo
</UL>

<P><STRONG><a name="[3c1]"></a>DEV_WaitForNotRunning_Poll</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[3c2]"></a>DEV_WaitForRunning_Poll</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
</UL>

<P><STRONG><a name="[3a2]"></a>DEV_IsCommunicating</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelSyncState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateRead
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateWrite
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsWriteReady
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsReadReady
</UL>

<P><STRONG><a name="[37e]"></a>DEV_GetMBXState</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead16
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetMBXState
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetMBXState
</UL>

<P><STRONG><a name="[3ae]"></a>DEV_TriggerWatchdog</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelWatchdog
</UL>

<P><STRONG><a name="[395]"></a>DEV_DoHostCOSChange</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SetHostState
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_BusState
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelConfigLock
</UL>

<P><STRONG><a name="[397]"></a>DEV_BusState</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsCommunicating
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelBusState
</UL>

<P><STRONG><a name="[3af]"></a>DEV_GetHostState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelHostState
</UL>

<P><STRONG><a name="[3b0]"></a>DEV_SetHostState</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelHostState
</UL>

<P><STRONG><a name="[3a3]"></a>DEV_ReadWriteBlock</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelExtendedStatusBlock
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelControlBlock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelCommonStatusBlock
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelUserBlock
</UL>

<P><STRONG><a name="[3a7]"></a>DEV_GetHandshakeBitState</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsWriteReady
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCIsReadReady
</UL>

<P><STRONG><a name="[3c3]"></a>DEV_CheckCOSFlags</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitCyclicTimer
</UL>

<P><STRONG><a name="[399]"></a>DEV_DoChannelInit</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotRunning_Poll
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsRunning
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashConfiguration
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelReset
</UL>

<P><STRONG><a name="[38a]"></a>DEV_DoSystemStart</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashFirmware
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelReset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceReset
</UL>

<P><STRONG><a name="[38c]"></a>DEV_DoSystemBootstart</STRONG> (Thumb, 800 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceBootstart
</UL>

<P><STRONG><a name="[3c4]"></a>cifXTKitCyclicTimer</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, cifxinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>

<P><STRONG><a name="[386]"></a>cifXReadFirmwareIdent</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
</UL>

<P><STRONG><a name="[385]"></a>cifXStartModule</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsReady
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashFirmware
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
</UL>

<P><STRONG><a name="[3f7]"></a>cifXTKitEnableHWInterrupt</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
</UL>

<P><STRONG><a name="[3f9]"></a>cifXTKitDisableHWInterrupt</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, cifxinit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
</UL>

<P><STRONG><a name="[196]"></a>cifXTKitAddDevice</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memrealloc
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnableInterrupts
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitEnableHWInterrupt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
</UL>

<P><STRONG><a name="[3f8]"></a>cifXTKitRemoveDevice</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, cifxinit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DisableInterrupts
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDisableHWInterrupt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>

<P><STRONG><a name="[197]"></a>cifXTKitDeinit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteLock
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Deinit
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
</UL>

<P><STRONG><a name="[192]"></a>cifXTKitInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Deinit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
</UL>

<P><STRONG><a name="[1a3]"></a>cifXTKitISRHandler</STRONG> (Thumb, 410 bytes, Stack size 0 bytes, cifxinterrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
</UL>

<P><STRONG><a name="[1a0]"></a>cifXTKitDSRHandler</STRONG> (Thumb, 1016 bytes, Stack size 0 bytes, cifxinterrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIOArea
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleBit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_isr_task
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
</UL>

<P><STRONG><a name="[400]"></a>md5_memcpy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_append
</UL>

<P><STRONG><a name="[374]"></a>md5_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
</UL>

<P><STRONG><a name="[375]"></a>md5_append</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_memcpy
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_finish
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
</UL>

<P><STRONG><a name="[376]"></a>md5_finish</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_append
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
</UL>

<P><STRONG><a name="[3da]"></a>USER_GetFirmwareFileCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
</UL>

<P><STRONG><a name="[3db]"></a>USER_GetFirmwareFile</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
</UL>

<P><STRONG><a name="[3dd]"></a>USER_GetConfigurationFileCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
</UL>

<P><STRONG><a name="[3de]"></a>USER_GetConfigurationFile</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
</UL>

<P><STRONG><a name="[3d6]"></a>USER_GetOSFile</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
</UL>

<P><STRONG><a name="[3cf]"></a>USER_GetBootloaderFile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3e3]"></a>USER_GetAliasName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
</UL>

<P><STRONG><a name="[3e9]"></a>USER_GetWarmstartParameters</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
</UL>

<P><STRONG><a name="[373]"></a>USER_Trace</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitISRHandler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDetectDeviceType
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashConfiguration
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashFirmware
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMDevice
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX100
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
</UL>

<P><STRONG><a name="[3ec]"></a>USER_GetInterruptEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tkituser_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCheckIRQEnable
</UL>

<P><STRONG><a name="[193]"></a>OS_Memalloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX100
</UL>

<P><STRONG><a name="[3d2]"></a>OS_Memfree</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3e7]"></a>OS_Memrealloc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
</UL>

<P><STRONG><a name="[194]"></a>OS_Memset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
</UL>

<P><STRONG><a name="[379]"></a>OS_Memcpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
</UL>

<P><STRONG><a name="[377]"></a>OS_Memcmp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX100
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
</UL>

<P><STRONG><a name="[3f5]"></a>OS_Memmove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
</UL>

<P><STRONG><a name="[3b9]"></a>OS_Sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_waitforbitstate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForRunning_Poll
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotRunning_Poll
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Poll
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Poll
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
</UL>

<P><STRONG><a name="[368]"></a>OS_GetMilliSecCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_waitforbitstate
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForRunning_Poll
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotRunning_Poll
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Irq
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Poll
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Irq
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Poll
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
</UL>

<P><STRONG><a name="[3ed]"></a>OS_CreateEvent</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCheckIRQEnable
</UL>

<P><STRONG><a name="[3fe]"></a>OS_SetEvent</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIOArea
</UL>

<P><STRONG><a name="[3f2]"></a>OS_DeleteEvent</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
</UL>

<P><STRONG><a name="[3bb]"></a>OS_WaitEvent</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState_Irq
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState_Irq
</UL>

<P><STRONG><a name="[37d]"></a>OS_Strcmp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceOpen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelOpen
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDetectDeviceType
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashDevice
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
</UL>

<P><STRONG><a name="[36b]"></a>OS_Strnicmp</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXFFile
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXOFile
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsFWFile
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
</UL>

<P><STRONG><a name="[367]"></a>OS_Strlen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetFWTransferTypeFromFileName
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXFFile
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsNXOFile
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_IsFWFile
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
</UL>

<P><STRONG><a name="[195]"></a>OS_Strncpy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverGetErrorDescription
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverEnumBoards
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverGetInformation
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
</UL>

<P><STRONG><a name="[3e5]"></a>OS_CreateLock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitInit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
</UL>

<P><STRONG><a name="[39f]"></a>OS_EnterLock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitCyclicTimer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleSyncBit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SetHostState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateRead
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateWrite
</UL>

<P><STRONG><a name="[3a1]"></a>OS_LeaveLock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitCyclicTimer
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ToggleSyncBit
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SetHostState
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_PutPacket
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetPacket
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoHostCOSChange
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateRead
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCActivateWrite
</UL>

<P><STRONG><a name="[3f4]"></a>OS_DeleteLock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
</UL>

<P><STRONG><a name="[3e4]"></a>OS_CreateMutex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
</UL>

<P><STRONG><a name="[37f]"></a>OS_WaitMutex</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdevicePutPacket
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetPacket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPutPacket
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetPacket
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[381]"></a>OS_ReleaseMutex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdevicePutPacket
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceGetPacket
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPutPacket
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIOWrite
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelGetPacket
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckCOSFlags
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemBootstart
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
</UL>

<P><STRONG><a name="[3f3]"></a>OS_DeleteMutex</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStopDevice
</UL>

<P><STRONG><a name="[3d0]"></a>OS_FileOpen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3d3]"></a>OS_FileClose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3d1]"></a>OS_FileRead</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3fc]"></a>OS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitInit
</UL>

<P><STRONG><a name="[3fb]"></a>OS_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
</UL>

<P><STRONG><a name="[3c7]"></a>OS_WritePCIConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
</UL>

<P><STRONG><a name="[3c6]"></a>OS_ReadPCIConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
</UL>

<P><STRONG><a name="[38e]"></a>OS_MapUserPointer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_custom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverMemoryPointer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCMemoryPtr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceExtendedMemory
</UL>

<P><STRONG><a name="[38f]"></a>OS_UnmapUserPointer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_custom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverMemoryPointer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelPLCMemoryPtr
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceExtendedMemory
</UL>

<P><STRONG><a name="[3f6]"></a>OS_EnableInterrupts</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, os_custom.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
</UL>

<P><STRONG><a name="[3fa]"></a>OS_DisableInterrupts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_custom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
</UL>

<P><STRONG><a name="[407]"></a>OS_StrLen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[406]"></a>OSEventNameGet</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[408]"></a>OSEventNameSet</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[40e]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[409]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[40d]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[40c]"></a>OSEventPendMulti</STRONG> (Thumb, 746 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[40f]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[411]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[414]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[418]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[226]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>OSIntEnter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>OSIntExit</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f6]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_canal_pressure_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_SetDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_enter_critical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pressure_abnormal_state
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_overflow_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[1f4]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_canal_pressure_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_SetDly
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_exit_critical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pressure_abnormal_state
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_overflow_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStateGet
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrRemainGet
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrNameGet
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[227]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[23c]"></a>OSTimeTick</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d6]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_version
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_info
</UL>

<P><STRONG><a name="[44e]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[427]"></a>OS_EventTaskRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[426]"></a>OS_EventTaskRdy</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[437]"></a>OS_EventTaskWait</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[435]"></a>OS_EventWaitListInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[452]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[428]"></a>OS_TCBInit</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[42b]"></a>OSFlagAccept</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c7]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
</UL>

<P><STRONG><a name="[42d]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[42e]"></a>OSFlagDel</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[42f]"></a>OSFlagNameGet</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[430]"></a>OSFlagNameSet</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1ca]"></a>OSFlagPend</STRONG> (Thumb, 624 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
</UL>

<P><STRONG><a name="[432]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[138]"></a>OSFlagPost</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO4_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO16_callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO10_callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
</UL>

<P><STRONG><a name="[433]"></a>OSFlagQuery</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[41d]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[434]"></a>OSMboxAccept</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1c8]"></a>OSMboxCreate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_mbox.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
</UL>

<P><STRONG><a name="[436]"></a>OSMboxDel</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1c9]"></a>OSMboxPend</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, os_mbox.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
</UL>

<P><STRONG><a name="[438]"></a>OSMboxPendAbort</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1ce]"></a>OSMboxPost</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, os_mbox.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>

<P><STRONG><a name="[439]"></a>OSMboxPostOpt</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[43a]"></a>OSMboxQuery</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, os_mbox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[124]"></a>OSMemCreate</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
</UL>

<P><STRONG><a name="[127]"></a>OSMemGet</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_with_recv_callback
</UL>

<P><STRONG><a name="[43b]"></a>OSMemNameGet</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[43c]"></a>OSMemNameSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[121]"></a>OSMemPut</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_send_task
</UL>

<P><STRONG><a name="[43d]"></a>OSMemQuery</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[41e]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, os_mem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[43e]"></a>OSMutexAccept</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[237]"></a>OSMutexCreate</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trace
</UL>

<P><STRONG><a name="[43f]"></a>OSMutexDel</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[231]"></a>OSMutexPend</STRONG> (Thumb, 608 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_no_blocking
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>

<P><STRONG><a name="[233]"></a>OSMutexPost</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_no_blocking
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>

<P><STRONG><a name="[441]"></a>OSMutexQuery</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[442]"></a>OSQAccept</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[10d]"></a>OSQCreate</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_cali_pump_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_adust_implement_task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_event
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
</UL>

<P><STRONG><a name="[443]"></a>OSQDel</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[219]"></a>OSQFlush</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
</UL>

<P><STRONG><a name="[ef]"></a>OSQPend</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_timing_back_task
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_send_task
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ucos_status
</UL>

<P><STRONG><a name="[444]"></a>OSQPendAbort</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[117]"></a>OSQPost</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_total_distance_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pressure_now
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
</UL>

<P><STRONG><a name="[21c]"></a>OSQPostFront</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
</UL>

<P><STRONG><a name="[445]"></a>OSQPostOpt</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[21a]"></a>OSQQuery</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
</UL>

<P><STRONG><a name="[41f]"></a>OS_QInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, os_q.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[446]"></a>OSSemAccept</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[123]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comX100_module_task
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_feedback_task
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_uart_cmd_analysis_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateMutex
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateEvent
</UL>

<P><STRONG><a name="[403]"></a>OSSemDel</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteMutex
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteLock
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteEvent
</UL>

<P><STRONG><a name="[11f]"></a>OSSemPend</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trouble_shooting_task
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_isr_task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_answer_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_answer_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_send_task
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitEvent
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitMutex
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
</UL>

<P><STRONG><a name="[447]"></a>OSSemPendAbort</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[12d]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_test_cancal_protect_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ipc_send_task
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm1_send_task
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm2_send_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_arm3_send_task
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_notification
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_answer_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_answer_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO3_callback
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO15_callback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReleaseMutex
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
</UL>

<P><STRONG><a name="[448]"></a>OSSemQuery</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[20a]"></a>OSSemSet</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, os_sem.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitEvent
</UL>

<P><STRONG><a name="[449]"></a>OSTaskChangePrio</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[44a]"></a>OSTaskCreate</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[44c]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[eb]"></a>OSTaskCreateExt</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_monitor_task
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_cali_pump_task
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trouble_shooting_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comX100_module_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_send_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_flow_task
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_feedback_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_adust_implement_task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shell_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_control_board_task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_start_task
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[44d]"></a>OSTaskDel</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[450]"></a>OSTaskDelReq</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[451]"></a>OSTaskNameGet</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[ec]"></a>OSTaskNameSet</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_comX100_isr_task
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_monitor_task
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_cali_pump_task
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trouble_shooting_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_comX100_module_task
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_send_task
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_flow_task
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_feedback_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_adust_implement_task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart_dma_route_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_route_task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shell_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_control_board_task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_start_task
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[168]"></a>OSTaskResume</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_end_func
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_end_func
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_end_func
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_end_func
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
</UL>

<P><STRONG><a name="[410]"></a>OSTaskStkChk</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[160]"></a>OSTaskSuspend</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_flow_func
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;air_remove_func
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pause_flow
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stop_program
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_implement
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_implement
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[e1]"></a>OSTaskQuery</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_os_run_information
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[453]"></a>OSTaskRegGet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[454]"></a>OSTaskRegGetID</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[455]"></a>OSTaskRegSet</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[98]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(.text)
</UL>
<P><STRONG><a name="[1d4]"></a>OSTimeDly</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, os_time.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_init_pump_pos
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_cassette_end
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lock_end
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_valve_end
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_stopped
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
</UL>

<P><STRONG><a name="[dd]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, os_time.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tone_ring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_warn_ring
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_error_ring
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_valve_func
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_flow_task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
</UL>

<P><STRONG><a name="[457]"></a>OSTimeDlyResume</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[f0]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_time.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_high_pressure
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_low_pressure
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ucos_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>

<P><STRONG><a name="[458]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[1e8]"></a>OSTmrCreate</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_key_press
</UL>

<P><STRONG><a name="[45a]"></a>OSTmrDel</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Free
</UL>

<P><STRONG><a name="[45d]"></a>OSTmrNameGet</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
</UL>

<P><STRONG><a name="[45e]"></a>OSTmrRemainGet</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[45f]"></a>OSTmrStateGet</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>

<P><STRONG><a name="[16f]"></a>OSTmrStart</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
</UL>

<P><STRONG><a name="[1ea]"></a>OSTmrStop</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_test_cancal_protect_callback
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_pause_status
</UL>

<P><STRONG><a name="[461]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[420]"></a>OSTmr_Init</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[210]"></a>OSTmr_SetDly</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
</UL>

<P><STRONG><a name="[116]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[119]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGetID
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxQuery
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPostOpt
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPendAbort
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxDel
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxAccept
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
</UL>

<P><STRONG><a name="[424]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[40b]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[423]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[2e]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41a]"></a>OSInitHookBegin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[421]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[42a]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[44f]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[415]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[456]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[412]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[44b]"></a>OSTaskStkInit</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[97]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[429]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[425]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[422]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[99]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[492]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, h1_alloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[f6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, h1_free.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[401]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, h1_realloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memrealloc
</UL>

<P><STRONG><a name="[404]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
</UL>

<P><STRONG><a name="[232]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, c89vsnprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traceInfo_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>

<P><STRONG><a name="[d7]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, __2snprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_blocking
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_no_blocking
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_tick_trace_output
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_version
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_info
</UL>

<P><STRONG><a name="[46a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, _printf_pad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[46b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _printf_pad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[469]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, _printf_str.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ab]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, _printf_dec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[46f]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b1]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b9]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a5]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[470]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 0 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f2]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, atoi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve_cmd
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_centri_cmd
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[fb]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, strtol.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test_cmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[19e]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, memcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_new_IO_data
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcmp
</UL>

<P><STRONG><a name="[22c]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>

<P><STRONG><a name="[118]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
</UL>

<P><STRONG><a name="[405]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, strncmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strnicmp
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_send_frame
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO4_callback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO16_callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO10_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_saved_cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cmd_to_buf
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[475]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[402]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memmove
</UL>

<P><STRONG><a name="[476]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_with_pla
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_canal
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ac_priming
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_priming
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_phase_ten_mins
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second_phase_ten_mins
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stable_blood_collect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_unload_canal
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_pump_speed
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_ACBlood_func
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_valve_func
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve_cmd
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_timing_back_task
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flow_speed_table
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[479]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[478]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnumBoardDemo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_event
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadFirmwareIdent
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindNextFile
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceFindFirstFile
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveFWFiles
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DeleteFile
</UL>

<P><STRONG><a name="[47a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[110]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, strncpy.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cmd_to_buf
</UL>

<P><STRONG><a name="[ee]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblRem
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve_cmd
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_centri_cmd
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_pump_cmd
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpdo_send_test_cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_test_cmd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ucos_status
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_ctype_table.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[464]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[473]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, init_alloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[47c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c3]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, init_alloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[47e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[46d]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[46e]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, _printf_intcommon.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[467]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[468]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[9b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> c89vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[47f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bb]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[bd]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[480]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, _printf_wctomb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b3]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[483]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[af]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b7]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[474]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, _strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[485]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[477]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[491]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[47b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[482]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, lludiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[48b]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[48e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bf]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[c1]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[484]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[481]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, _wcrtomb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[47d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[ca]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[48d]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[487]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, bigflt0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cf]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[490]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[48f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[494]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, defsig_general.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[495]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_wrch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[488]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[497]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[496]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[498]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 0 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[499]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[489]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[48a]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[49a]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 0 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[48c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[471]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[9c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
</UL>

<P><STRONG><a name="[49b]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
</UL>

<P><STRONG><a name="[49e]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[49d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[49c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
</UL>

<P><STRONG><a name="[49f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
</UL>

<P><STRONG><a name="[4a1]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[4a6]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_value
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speed_table
</UL>

<P><STRONG><a name="[4a4]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
</UL>

<P><STRONG><a name="[4a5]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_final_result
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO1_callback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speed_table
</UL>

<P><STRONG><a name="[4a7]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_final_result
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speed_table
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_value
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO1_callback
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_final_result
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_RPDO1_callback
</UL>

<P><STRONG><a name="[4a8]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[4a0]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[4a3]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[4a9]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[a7]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d4]"></a>show_version_info</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSVersion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[d8]"></a>read_rtc_data</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VBAT_measure
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat_value
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_date
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_start_task
</UL>

<P><STRONG><a name="[81]"></a>app_start_task</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_trace
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_shell_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_led_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_control_board_task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_buzzer_ring_task
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rtc_data
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_version_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>get_system_version</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSVersion
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>App_TestShellCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>show_os_run_information</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ucos_status
</UL>

<P><STRONG><a name="[c]"></a>get_ucos_status</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_os_run_information
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>reset_system</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>get_uart_data</STRONG> (Thumb, 924 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_bkpsram_cmd
</UL>

<P><STRONG><a name="[e]"></a>rtc_bkpsram_cmd</STRONG> (Thumb, 502 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_byte_to_bkpsram
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_date
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_byte_from_bkpsram
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vbat_value
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_time
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_date
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>uart_send_test_cmd</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>tpdo_send_test_cmd</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_canal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ctrl_pump_cmd</STRONG> (Thumb, 1674 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pump_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ctrl_centri_cmd</STRONG> (Thumb, 544 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ctrl_turn_valve_cmd</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>cmd_list</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.data)
</UL>
<P><STRONG><a name="[10c]"></a>init_uart_event</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[10f]"></a>save_cmd_to_buf</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
</UL>

<P><STRONG><a name="[112]"></a>delete_saved_cmd</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
</UL>

<P><STRONG><a name="[113]"></a>exec_cmd</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_saved_cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cmd_to_buf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[115]"></a>do_esc_cmd</STRONG> (Thumb, 680 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_task
</UL>

<P><STRONG><a name="[82]"></a>shell_task</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, app_shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cmd_tbl_add
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_esc_cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_event
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_shell.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>usart_dma_send_task</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_usart_dma_tx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart_dma_route.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>usart_dma_route_task</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, app_usart_dma_route.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usart_dma_route.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>init_speed_table</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app_cmd_analysis.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_flow_speed_table
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
</UL>

<P><STRONG><a name="[135]"></a>uart_data_parse</STRONG> (Thumb, 1130 bytes, Stack size 0 bytes, app_cmd_analysis.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_speed_table
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_recv
</UL>

<P><STRONG><a name="[85]"></a>uart_data_recv</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, app_cmd_analysis.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_crc_check_func
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_parse
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_answer_cmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cmd_analysis.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>led_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_led.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_trun_on
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_trun_off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_led.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>control_flow_task</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, app_control_flow.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_power_on
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_comm_state
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_init_cali_pump_task
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blood_collect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_flow.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>canopen_answer_error</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm3_answer_cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_answer_cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_answer_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
</UL>

<P><STRONG><a name="[15d]"></a>uart_send_hardfault_err</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
</UL>

<P><STRONG><a name="[15e]"></a>uart_send_error_msg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
</UL>

<P><STRONG><a name="[15f]"></a>high_pressure_implement</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[162]"></a>low_pressure_implement</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_abnormal_handle
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[165]"></a>stop_centrifuge</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stop_program
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[166]"></a>slow_down_centrifuge</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[169]"></a>resume_program_implement</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adjust_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[16b]"></a>stop_program_implement</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_stop_program
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[16d]"></a>pause_program_implement</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_run_pumps
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_led_on
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pause_flow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
</UL>

<P><STRONG><a name="[171]"></a>analysis_slave_action</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_program_implement
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_program_implement
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slow_down_centrifuge
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_centrifuge
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pressure_implement
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;high_pressure_implement
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_monitor_task
</UL>

<P><STRONG><a name="[88]"></a>control_monitor_task</STRONG> (Thumb, 684 bytes, Stack size 0 bytes, app_control_monitor.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_slave_action
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_program_implement
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_error_msg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_hardfault_err
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canopen_answer_error
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_monitor.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>show_comX100_error</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverGetErrorDescription
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_register_notification
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
</UL>

<P><STRONG><a name="[177]"></a>DumpPacket</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, app_comx100.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChannelDemo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysdeviceDemo
</UL>

<P><STRONG><a name="[8b]"></a>handle_notification</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelSyncState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_comx100.o(.text)
</UL>
<P><STRONG><a name="[199]"></a>comX100_register_notification</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelRegisterNotification
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelHostState
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
</UL>

<P><STRONG><a name="[19c]"></a>init_communication_channel</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDriverOpen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelOpen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_register_notification
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
</UL>

<P><STRONG><a name="[19d]"></a>check_new_IO_data</STRONG> (Thumb, 842 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_module_task
</UL>

<P><STRONG><a name="[8c]"></a>comX100_module_task</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xChannelIORead
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_comX100_module
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXToolkitInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_new_IO_data
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_communication_channel
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_comX100_error
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_comx100.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>comX100_isr_task</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_comx100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_comx100.o(.text)
</UL>
<P><STRONG><a name="[1a5]"></a>high_pressure_end_func</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1a7]"></a>low_pressure_end_func</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_normal_handle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_pressure_status
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1a8]"></a>over_flow_end_func</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_plt_total_dis
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1ac]"></a>air_remove_end_func</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_plt_total_dis
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1ad]"></a>resume_ACBlood_func</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_run_pumps
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_resume_flow
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_centrifuge
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1ae]"></a>pour_saline_func</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1af]"></a>air_remove_func</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_plt_total_dis
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_overflow_status
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1b1]"></a>over_flow_func</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_plt_total_dis
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_overflow_status
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1ba]"></a>param_update_func</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, app_control_adjust_implement.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_phase_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_draw_speed
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_feedback_speed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_ac_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_agglu_rate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_adjust_implement_task
</UL>

<P><STRONG><a name="[1c0]"></a>send_collect_volume</STRONG> (Thumb, 316 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_collect_dis
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_collect_status
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_run_status
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_timing_back_task
</UL>

<P><STRONG><a name="[1c4]"></a>send_pressure_frame</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_timing_back_task
</UL>

<P><STRONG><a name="[1c5]"></a>send_pressure_now</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_timing_back_task
</UL>

<P><STRONG><a name="[8e]"></a>control_timing_back_task</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, app_control_timing_back.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pressure_now
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_pressure_frame
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_collect_volume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_timing_back.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>tpdo_arm3_send_task</STRONG> (Thumb, 384 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_resend_cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cmd_send.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>tpdo_arm2_send_task</STRONG> (Thumb, 384 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_resend_cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cmd_send.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>tpdo_arm1_send_task</STRONG> (Thumb, 564 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_resend_cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comX100_send_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cmd_send.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>uart_ipc_send_task</STRONG> (Thumb, 352 bytes, Stack size 0 bytes, app_cmd_send.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_error_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_array_null
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm0_get_cur_prio
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_packet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cmd_send.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>wait_pump_stopped</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
</UL>

<P><STRONG><a name="[1d6]"></a>wait_valve_end</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
</UL>

<P><STRONG><a name="[1d7]"></a>wait_lock_end</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_door_lock
</UL>

<P><STRONG><a name="[1d9]"></a>wait_cassette_end</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_run_cassette
</UL>

<P><STRONG><a name="[1e3]"></a>set_pump_distance_type</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, app_control_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm2_send_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm1_send_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pump_total_distance
</UL>

<P><STRONG><a name="[1f7]"></a>user_stm_tim_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, app_user_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_tmr_task
</UL>

<P><STRONG><a name="[1ff]"></a>user_timer_used</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_user_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_timer_create
</UL>

<P><STRONG><a name="[20d]"></a>ac_priming</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_pump_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
</UL>

<P><STRONG><a name="[20e]"></a>test_canal</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_test_canal_pressure_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_SetDly
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_test_canal_pressure_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
</UL>

<P><STRONG><a name="[211]"></a>remove_air</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_canal
</UL>

<P><STRONG><a name="[212]"></a>load_canal</STRONG> (Thumb, 530 bytes, Stack size 0 bytes, app_control_set_canal.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_air
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_load_canal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_canal
</UL>

<P><STRONG><a name="[213]"></a>get_plt_total_distance</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_control_global_state.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_plt_collect_dis
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_plt_total_dis
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_plt_total_dis
</UL>

<P><STRONG><a name="[214]"></a>buzzer_error_ring</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_on
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
</UL>

<P><STRONG><a name="[217]"></a>buzzer_warn_ring</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_on
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
</UL>

<P><STRONG><a name="[218]"></a>buzzer_tone_ring</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_on
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_off
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_buzzer_ring_task
</UL>

<P><STRONG><a name="[93]"></a>app_buzzer_ring_task</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, app_buzzer_ring.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bell_off
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_tone_ring
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_warn_ring
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_error_ring
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_buzzer_ring.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>commit_result</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
</UL>

<P><STRONG><a name="[21e]"></a>feedback_with_pla</STRONG> (Thumb, 666 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pause_flow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
</UL>

<P><STRONG><a name="[21f]"></a>get_final_result</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feedback_direct
</UL>

<P><STRONG><a name="[220]"></a>feedback_direct</STRONG> (Thumb, 848 bytes, Stack size 0 bytes, app_control_feedback.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_final_result
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flow_wait_status
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_valve_param
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_pause_flow
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_pump_end
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pump_param
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_turn_valve
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_pump
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_stop_centrifuge
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_start_pump
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_buzzer_ring_tone
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_feedback_task
</UL>

<P><STRONG><a name="[222]"></a>calculate_pump_k_value</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, app_control_cali_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_value
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_frame
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_cali_pump_task
</UL>

<P><STRONG><a name="[94]"></a>control_cali_pump_task</STRONG> (Thumb, 388 bytes, Stack size 0 bytes, app_control_cali_pump.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_pump_k_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pump_total_distance
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_traceInfo_output
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_control_cali_pump.o(.text)
</UL>
<P><STRONG><a name="[228]"></a>Shell_ModuleCmdClr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblRem
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Init
</UL>

<P><STRONG><a name="[229]"></a>Shell_ModuleCmdNameGet</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdSearch
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_CmdTblAdd
</UL>

<P><STRONG><a name="[22a]"></a>Shell_CmdSearch</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_ModuleCmdNameGet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
</UL>

<P><STRONG><a name="[22b]"></a>Shell_Scanner</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shell_Exec
</UL>

<P><STRONG><a name="[24e]"></a>init_usart_with_dma</STRONG> (Thumb, 380 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_usart
</UL>

<P><STRONG><a name="[25d]"></a>rtc_config</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupRegulatorCmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_backup_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[272]"></a>VBAT_measure_config</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VBATCmd
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_VBAT_measure
</UL>

<P><STRONG><a name="[300]"></a>TI4_Config</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2ff]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fe]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fd]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[32c]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[32b]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[37a]"></a>CreateCRC32</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cifxdownload.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_UploadFile
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DownloadFile
</UL>

<P><STRONG><a name="[3b8]"></a>DEV_WaitForBitState_Poll</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
</UL>

<P><STRONG><a name="[3ba]"></a>DEV_WaitForBitState_Irq</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitEvent
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForBitState
</UL>

<P><STRONG><a name="[3bc]"></a>DEV_WaitForSyncState_Poll</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState
</UL>

<P><STRONG><a name="[3bd]"></a>DEV_WaitForSyncState_Irq</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, cifxhwfunctions.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WaitEvent
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForSyncState
</UL>

<P><STRONG><a name="[3c5]"></a>cifXHardwareReset</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_WritePCIConfig
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ReadPCIConfig
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMDevice
</UL>

<P><STRONG><a name="[3c8]"></a>cifXStartBootloader_netX100</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3c9]"></a>nxbl_waitforbitstate</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetMilliSecCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_get_packet
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_send_packet
</UL>

<P><STRONG><a name="[3ca]"></a>nxbl_send_packet</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_waitforbitstate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_transfer_packet
</UL>

<P><STRONG><a name="[3cb]"></a>nxbl_get_packet</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_waitforbitstate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_transfer_packet
</UL>

<P><STRONG><a name="[3cc]"></a>nxbl_transfer_packet</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_get_packet
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
</UL>

<P><STRONG><a name="[3cd]"></a>cifXStartBootloader_netX50</STRONG> (Thumb, 458 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_transfer_packet
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_get_packet
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nxbl_send_packet
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
</UL>

<P><STRONG><a name="[3ce]"></a>cifXRunBootloader</STRONG> (Thumb, 518 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetBootloaderFile
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileOpen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileClose
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX50
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartBootloader_netX100
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMDevice
</UL>

<P><STRONG><a name="[3d4]"></a>cifXStartRAMDevice</STRONG> (Thumb, 876 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXRunBootloader
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHardwareReset
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3d5]"></a>cifXHandleRAMBaseOSModule</STRONG> (Thumb, 464 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetOSFile
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileOpen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileClose
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3d7]"></a>cifXStartFlashDevice</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3d8]"></a>cifXHandleFlashBaseOSModule</STRONG> (Thumb, 1144 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetOSFile
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileOpen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileClose
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_RemoveChannelFiles
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3d9]"></a>cifXDownloadFWFiles</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strncpy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetFirmwareFileCount
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetFirmwareFile
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileOpen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileClose
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ProcessFWDownload
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3dc]"></a>cifXDownloadCNFFiles</STRONG> (Thumb, 468 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetConfigurationFileCount
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetConfigurationFile
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileRead
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileOpen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FileClose
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSysdeviceDownload
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_CheckForDownload
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3df]"></a>cifXStartRAMFirmware</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForNotReady_Poll
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3e0]"></a>cifXStartFlashFirmware</STRONG> (Thumb, 676 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartModule
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoSystemStart
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3e1]"></a>cifXStartFlashConfiguration</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_DoChannelInit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3e2]"></a>cifXCreateSystemDevice</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetAliasName
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateMutex
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead16
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_LeaveLock
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EnterLock
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3e6]"></a>cifXReadChannelLayout</STRONG> (Thumb, 1680 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memrealloc
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateMutex
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
</UL>

<P><STRONG><a name="[3e8]"></a>cifXHandleWarmstartParameter</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetWarmstartParameters
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForRunning_Poll
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3ea]"></a>cifXCreateChannels</STRONG> (Thumb, 1232 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memalloc
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memrealloc
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateMutex
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXReadChannelLayout
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_WaitForReady_Poll
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHostFlags
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_TransferPacket
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadHandshakeFlags
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXConvertEndianess
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memcpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3eb]"></a>cifXCheckIRQEnable</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GetInterruptEnable
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3ee]"></a>cifXIsBaseOSModule</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead32
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3ef]"></a>cifXDetectDeviceType</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Strcmp
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartDevice
</UL>

<P><STRONG><a name="[3f0]"></a>cifXStartDevice</STRONG> (Thumb, 856 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memset
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CreateLock
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDetectDeviceType
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXIsBaseOSModule
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCheckIRQEnable
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateChannels
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleWarmstartParameter
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXCreateSystemDevice
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashConfiguration
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashFirmware
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMFirmware
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadCNFFiles
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXDownloadFWFiles
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleFlashBaseOSModule
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartFlashDevice
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXHandleRAMBaseOSModule
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXStartRAMDevice
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwIfRead8
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Trace
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitAddDevice
</UL>

<P><STRONG><a name="[3f1]"></a>cifXStopDevice</STRONG> (Thumb, 554 bytes, Stack size 0 bytes, cifxinit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memrealloc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memmove
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Memfree
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteMutex
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteLock
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_DeleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDeinit
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitRemoveDevice
</UL>

<P><STRONG><a name="[3fd]"></a>ProcessIOArea</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, cifxinterrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SetEvent
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GetIOBitstate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cifXTKitDSRHandler
</UL>

<P><STRONG><a name="[3ff]"></a>md5_process</STRONG> (Thumb, 2144 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_append
</UL>

<P><STRONG><a name="[40a]"></a>OS_SchedNew</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[413]"></a>OS_InitTaskStat</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[416]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[417]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[419]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[41c]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[41b]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[42c]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[431]"></a>OS_FlagBlock</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, os_flag.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[440]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, os_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[459]"></a>OSTmr_Alloc</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
</UL>

<P><STRONG><a name="[45c]"></a>OSTmr_Free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, os_tmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
</UL>

<P><STRONG><a name="[45b]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrDel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[460]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[96]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(.text)
</UL>
<P><STRONG><a name="[462]"></a>OSTmr_InitTask</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, os_tmr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[463]"></a>SetSysClock</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[28]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4aa]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[4a2]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[9d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[486]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
